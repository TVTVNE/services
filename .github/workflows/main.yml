name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonage du dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Debug : Liste des fichiers à la racine du dépôt
      - name: List repository files
        run: ls -la

      # 3. Installation des dépendances Angular avec npm ci pour une installation propre
      - name: Install Angular dependencies
        run: npm ci --legacy-peer-deps
        working-directory: angular-app

      # 4. Debug : Vérifier que node_modules est bien installé
      - name: List angular-app/node_modules
        run: ls -la node_modules
        working-directory: angular-app

      # 5. Installation globale d'Angular CLI
      - name: Install Angular CLI globally
        run: npm install -g @angular/cli

      # 6. Debug : Vérifier que la commande "ng" est accessible
      - name: Verify Angular CLI installation
        run: which ng

      # 7. Build Angular en utilisant la commande globale "ng"
      - name: Build Angular
        run: ng build --configuration production
        working-directory: angular-app

      # 8. Setup .NET et build/publish
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Build .NET solution
        run: dotnet build ./dotnet-api/dotnet-api.csproj --configuration Release

      - name: Publish .NET
        run: dotnet publish ./dotnet-api/dotnet-api.csproj -c Release -o publish

            # 9. Déploiement sur EC2
      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > id_rsa
          chmod 600 id_rsa

          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            IP=${{ secrets.IP_EC2_TEST }}
          elif [[ "${{ github.ref_name }}" == "prod" ]]; then
            IP=${{ secrets.IP_EC2_PROD }}
          fi

          scp -o StrictHostKeyChecking=no -i id_rsa -r angular-app/dist/* ec2-user@$IP:/tmp/angular
          scp -o StrictHostKeyChecking=no -i id_rsa -r publish/* ec2-user@$IP:/tmp/dotnet

          ssh -o StrictHostKeyChecking=no -i id_rsa ec2-user@$IP << 'EOT'
            sudo rm -rf /var/www/angular-app
            sudo mv /tmp/angular /var/www/angular-app
            sudo rm -rf ~/dotnet
            sudo mv /tmp/dotnet ~/dotnet
            sudo systemctl restart nginx
            sudo systemctl restart dotnet-api
          EOT
