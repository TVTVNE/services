name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonage du dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # (Optionnel) Debug : Liste des fichiers à la racine du dépôt
      - name: List repository files
        run: ls -la

      # 2. Installation des dépendances Angular (mode CI propre)
      - name: Install Angular dependencies
        run: npm ci --legacy-peer-deps
        working-directory: angular-app

      # (Optionnel) Debug : Liste des modules Angular installés
      - name: List angular-app/node_modules
        run: ls -la node_modules
        working-directory: angular-app

      # 3. Fixer les permissions pour le binaire Angular CLI
      - name: Fix permissions for Angular CLI
        run: chmod +x node_modules/.bin/ng
        working-directory: angular-app

      # 4. Installation globale d'Angular CLI pour être sûr que "ng" est accessible
      - name: Install Angular CLI globally
        run: npm install -g @angular/cli

      # 5. Vérifier que la commande "ng" est accessible
      - name: Verify Angular CLI installation
        run: which ng

      # 6. Build Angular en production
      - name: Build Angular
        run: ng build --configuration production
        working-directory: angular-app

      # 7. Setup et build/publish .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Build .NET solution
        run: dotnet build ./dotnet-api/dotnet-api.csproj --configuration Release

      - name: Publish .NET
        run: dotnet publish ./dotnet-api/dotnet-api.csproj -c Release -o publish

      # 8. Déploiement sur EC2
      - name: Deploy to EC2
        run: |
          # Crée le fichier id_rsa avec la clé privée depuis le secret
          echo "${{ secrets.EC2_SSH_KEY }}" > id_rsa
          chmod 600 id_rsa

          # Choix de l'instance en fonction de la branche
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            IP=${{ secrets.IP_EC2_TEST }}
          elif [[ "${{ github.ref_name }}" == "prod" ]]; then
            IP=${{ secrets.IP_EC2_PROD }}
          fi

          # Transfert des fichiers Angular et .NET sur l'instance EC2
          scp -o StrictHostKeyChecking=no -i id_rsa -r angular-app/dist/* ubuntu@$IP:/tmp/angular
          scp -o StrictHostKeyChecking=no -i id_rsa -r publish/* ubuntu@$IP:/tmp/dotnet

          # Connexion SSH pour déployer sur l'instance EC2
          ssh -o StrictHostKeyChecking=no -i id_rsa ubuntu@$IP << 'EOT'
            # Créer le répertoire pour Angular s'il n'existe pas
            sudo mkdir -p /var/www/angular-app

            # Installer nginx s'il n'est pas installé (sur Ubuntu)
            if ! command -v nginx >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y nginx
              sudo systemctl start nginx
              sudo systemctl enable nginx
            fi

            # Déployer l'application Angular
            sudo rm -rf /var/www/angular-app/*
            sudo mv /tmp/angular /var/www/angular-app

            # Déployer l'API .NET
            sudo rm -rf ~/dotnet
            sudo mv /tmp/dotnet ~/dotnet

            # Créer et démarrer le service systemd pour l'API .NET si nécessaire
            if [ ! -f /etc/systemd/system/dotnet-api.service ]; then
              sudo tee /etc/systemd/system/dotnet-api.service > /dev/null <<EOF